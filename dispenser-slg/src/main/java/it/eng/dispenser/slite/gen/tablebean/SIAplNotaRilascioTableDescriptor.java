/*
 * Engineering Ingegneria Informatica S.p.A.
 *
 * Copyright (C) 2023 Regione Emilia-Romagna
 * <p/>
 * This program is free software: you can redistribute it and/or modify it under the terms of
 * the GNU Affero General Public License as published by the Free Software Foundation,
 * either version 3 of the License, or (at your option) any later version.
 * <p/>
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 * <p/>
 * You should have received a copy of the GNU Affero General Public License along with this program.
 * If not, see <https://www.gnu.org/licenses/>.
 */

package it.eng.dispenser.slite.gen.tablebean;

import java.sql.Types;
import java.util.LinkedHashMap;
import java.util.Map;

import it.eng.spagoLite.db.oracle.bean.column.ColumnDescriptor;
import it.eng.spagoLite.db.oracle.bean.column.TableDescriptor;

/**
 * @author Sloth
 *
 *         Bean per la tabella Apl_Nota_Rilascio
 *
 */
public class SIAplNotaRilascioTableDescriptor extends TableDescriptor {

    /*
     * @Generated( value = "it.eg.dbtool.db.oracle.beangen.Oracle4JPAClientBeanGen$TableBeanWriter", comments =
     * "This class was generated by OraTool", date = "Wednesday, 26 June 2019 11:18" )
     */

    public static final String SELECT = "Select * from Apl_Nota_Rilascio /**/";
    public static final String TABLE_NAME = "Apl_Nota_Rilascio";
    public static final String COL_ID_NOTA_RILASCIO = "id_nota_rilascio";
    public static final String COL_ID_APPLIC = "id_applic";
    public static final String COL_CD_VERSIONE = "cd_versione";
    public static final String COL_DT_VERSIONE = "dt_versione";
    public static final String COL_DT_INI_VAL = "dt_ini_val";
    public static final String COL_DT_FINE_VAL = "dt_fine_val";
    public static final String COL_DS_EVIDENZA = "ds_evidenza";
    public static final String COL_BL_NOTA = "bl_nota";

    private static Map<String, ColumnDescriptor> map = new LinkedHashMap<String, ColumnDescriptor>();

    static {
        map.put(COL_ID_NOTA_RILASCIO, new ColumnDescriptor(COL_ID_NOTA_RILASCIO, Types.DECIMAL, 22, true));
        map.put(COL_ID_APPLIC, new ColumnDescriptor(COL_ID_APPLIC, Types.DECIMAL, 22, false));
        map.put(COL_CD_VERSIONE, new ColumnDescriptor(COL_CD_VERSIONE, Types.VARCHAR, 100, false));
        map.put(COL_DT_VERSIONE, new ColumnDescriptor(COL_DT_VERSIONE, Types.TIMESTAMP, 7, false));
        map.put(COL_DT_INI_VAL, new ColumnDescriptor(COL_DT_INI_VAL, Types.TIMESTAMP, 7, false));
        map.put(COL_DT_FINE_VAL, new ColumnDescriptor(COL_DT_FINE_VAL, Types.TIMESTAMP, 7, false));
        map.put(COL_DS_EVIDENZA, new ColumnDescriptor(COL_DS_EVIDENZA, Types.VARCHAR, 4000, false));
        map.put(COL_BL_NOTA, new ColumnDescriptor(COL_BL_NOTA, Types.CLOB, 4000, false));
    }

    public Map<String, ColumnDescriptor> getColumnMap() {
        return map;
    }

    public String getTableName() {
        return TABLE_NAME;
    }

    public String getStatement() {
        return SELECT;
    }

}
