/*
 * Engineering Ingegneria Informatica S.p.A.
 *
 * Copyright (C) 2023 Regione Emilia-Romagna
 * <p/>
 * This program is free software: you can redistribute it and/or modify it under the terms of
 * the GNU Affero General Public License as published by the Free Software Foundation,
 * either version 3 of the License, or (at your option) any later version.
 * <p/>
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 * <p/>
 * You should have received a copy of the GNU Affero General Public License along with this program.
 * If not, see <https://www.gnu.org/licenses/>.
 */

package it.eng.dispenser.slite.gen.viewbean;

import java.sql.Types;
import java.util.LinkedHashMap;
import java.util.Map;

import it.eng.spagoLite.db.oracle.bean.column.ColumnDescriptor;
import it.eng.spagoLite.db.oracle.bean.column.TableDescriptor;

/**
 * @author Sloth
 *
 *         Bean per la tabella Aro_V_Lis_Comp_Doc
 *
 */
public class AroVLisCompDocTableDescriptor extends TableDescriptor {

    /*
     * @Generated( value = "it.eg.dbtool.db.oracle.beangen.Oracle4JPAClientBeanGen$ViewBeanWriter", comments =
     * "This class was generated by OraTool", date = "Friday, 19 September 2014 14:48" )
     */

    public static final String SELECT = "Select * from Aro_V_Lis_Comp_Doc /**/";
    public static final String TABLE_NAME = "Aro_V_Lis_Comp_Doc";
    public static final String COL_ID_DOC = "id_doc";
    public static final String COL_ID_COMP_DOC = "id_comp_doc";
    public static final String COL_NI_ORD_COMP_DOC = "ni_ord_comp_doc";
    public static final String COL_NM_TIPO_COMP_DOC = "nm_tipo_comp_doc";
    public static final String COL_TI_SUPPORTO_COMP = "ti_supporto_comp";
    public static final String COL_DS_NOME_COMP_VERS = "ds_nome_comp_vers";
    public static final String COL_NM_FORMATO_CALC = "nm_formato_calc";
    public static final String COL_NM_FORMATO_VERS = "nm_formato_vers";
    public static final String COL_NI_SIZE_FILE_CALC = "ni_size_file_calc";
    public static final String COL_DS_URN_COMP_CALC = "ds_urn_comp_calc";
    public static final String COL_NI_ORD_COMP_PADRE = "ni_ord_comp_padre";
    public static final String COL_DS_FORMATO_RAPPR_CALC = "ds_formato_rappr_calc";
    public static final String COL_TI_ESITO_VERIF_FIRME = "ti_esito_verif_firme";
    public static final String COL_DS_MSG_ESITO_VERIF_FIRME = "ds_msg_esito_verif_firme";
    public static final String COL_FL_COMP_FIRMATO = "fl_comp_firmato";

    private static Map<String, ColumnDescriptor> map = new LinkedHashMap<String, ColumnDescriptor>();

    static {
        map.put(COL_ID_DOC, new ColumnDescriptor(COL_ID_DOC, Types.DECIMAL, 22, true));
        map.put(COL_ID_COMP_DOC, new ColumnDescriptor(COL_ID_COMP_DOC, Types.DECIMAL, 22, true));
        map.put(COL_NI_ORD_COMP_DOC, new ColumnDescriptor(COL_NI_ORD_COMP_DOC, Types.DECIMAL, 22, true));
        map.put(COL_NM_TIPO_COMP_DOC, new ColumnDescriptor(COL_NM_TIPO_COMP_DOC, Types.VARCHAR, 100, true));
        map.put(COL_TI_SUPPORTO_COMP, new ColumnDescriptor(COL_TI_SUPPORTO_COMP, Types.VARCHAR, 20, true));
        map.put(COL_DS_NOME_COMP_VERS, new ColumnDescriptor(COL_DS_NOME_COMP_VERS, Types.VARCHAR, 254, true));
        map.put(COL_NM_FORMATO_CALC, new ColumnDescriptor(COL_NM_FORMATO_CALC, Types.VARCHAR, 100, true));
        map.put(COL_NM_FORMATO_VERS, new ColumnDescriptor(COL_NM_FORMATO_VERS, Types.VARCHAR, 100, true));
        map.put(COL_NI_SIZE_FILE_CALC, new ColumnDescriptor(COL_NI_SIZE_FILE_CALC, Types.DECIMAL, 22, true));
        map.put(COL_DS_URN_COMP_CALC, new ColumnDescriptor(COL_DS_URN_COMP_CALC, Types.VARCHAR, 254, true));
        map.put(COL_NI_ORD_COMP_PADRE, new ColumnDescriptor(COL_NI_ORD_COMP_PADRE, Types.DECIMAL, 22, true));
        map.put(COL_DS_FORMATO_RAPPR_CALC, new ColumnDescriptor(COL_DS_FORMATO_RAPPR_CALC, Types.VARCHAR, 254, true));
        map.put(COL_TI_ESITO_VERIF_FIRME, new ColumnDescriptor(COL_TI_ESITO_VERIF_FIRME, Types.VARCHAR, 20, true));
        map.put(COL_DS_MSG_ESITO_VERIF_FIRME,
                new ColumnDescriptor(COL_DS_MSG_ESITO_VERIF_FIRME, Types.VARCHAR, 254, true));
        map.put(COL_FL_COMP_FIRMATO, new ColumnDescriptor(COL_FL_COMP_FIRMATO, Types.VARCHAR, 1, true));
    }

    public Map<String, ColumnDescriptor> getColumnMap() {
        return map;
    }

    public String getTableName() {
        return TABLE_NAME;
    }

    public String getStatement() {
        return SELECT;
    }

}
